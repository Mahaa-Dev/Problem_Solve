# -*- coding: utf-8 -*-
"""noughtsandcross.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HG1KnR2RI7EplzZ0a_OzmZCrt59hSNiC
"""

import random
import os.path
import json

random.seed()
def draw_board(board):
    for row in board:
        print(' '.join(row))

def welcome(board):
    print("Welcome to Tic-Tac-Toe!")
    draw_board(board)

def initialise_board(board):
    for i in range(3):
        for j in range(3):
            board[i][j] = ' '
    return board

    
def get_player_move(board):
    while True:
        row = int(input("Enter row (0-2): "))
        col = int(input("Enter col (0-2): "))
        if row in range(3) and col in range(3) and board[row][col] == " ":
            board[row][col] = "X"
            return row, col
        else:
            print("Invalid move. Please try again.")

def choose_computer_move(board):
    while True:
        row = random.randint(0, 2)
        col = random.randint(0, 2)
        if board[row][col] == " ":
            board[row][col] = "O"
            return row, col

def check_for_win(board, mark):
    for i in range(3):
        # check rows
        if board[i] == [mark, mark, mark]:
            return True
        # check cols
        if board[0][i] == mark and board[1][i] == mark and board[2][i] == mark:
            return True
    # check diagonals
    if board[0][0] == mark and board[1][1] == mark and board[2][2] == mark:
        return True
    if board[0][2] == mark and board[1][1] == mark and board[2][0] == mark:
        return True
    return False

def check_for_draw(board):
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                return False
    return True
        
def play_game(board):
    initialise_board(board)
    while True:
        draw_board(board)
        row, col = get_player_move(board)
        board[row][col] = 'X'
        draw_board(board)
        if check_for_win(board, 'X'):
            return 1
        elif check_for_draw(board):
            return 0
        row, col = choose_computer_move(board)
        board[row][col] = 'O'
        draw_board(board)
        if check_for_win(board, 'O'):
            return -1
        elif check_for_draw(board):
            return 0


def menu():
    while True:
        choice = input("Enter '1' to play, '2' to save score, '3' to load scores, or 'q' to quit: ")
        if choice in ["1", "2", "3", "q"]:
            return choice
        else:
            print("Invalid choice. Please try again.")

def load_scores():
    if os.path.exists("leaderboard.txt"):
        with open("leaderboard.txt", "r") as f:
            leaders = json.load(f)
    else:
        leaders = {}
    return leaders
    
def save_score(score):
    name = input("Enter your name: ")
    leaders = load_scores()
    leaders[name] = score
    with open("leaderboard.txt", "w") as f:
        json.dump(leaders, f)
    return

def display_leaderboard(leaders):
    print("Leaderboard:")
    for name, score in leaders.items():
        print(name, score)

def main():
    board = [ ['1','2','3'],\
              ['4','5','6'],\
              ['7','8','9']]

    welcome(board)
    total_score = 0
    while True:
        choice = menu()
        if choice == '1':
            score = play_game(board)
            total_score += score
            print('Your current score is:',total_score)
        if choice == '2':
            save_score(total_score)
        if choice == '3':
            leader_board = load_scores()
            display_leaderboard(leader_board)
        if choice == 'q':
            print('Thank you for playing the "Unbeatable Noughts and Crosses" game.')
            print('Good bye')
            return


    
# Program execution begins here
if __name__ == '__main__':
    main()